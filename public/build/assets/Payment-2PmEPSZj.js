import { l as b, T as M, d as N, o as a, c as z, w as $, a as e, n as A, u as r, f as c, g as L, t as u, i as J, p as v, v as f, e as o, F as O, h as F, b as h, Z as K } from "./app-B9AaS3di.js"; import { _ as Q } from "./AppLayout-BpgBCMDE.js"; import { f as U, r as G, t as w, b as X, _ as W, a as Y } from "./general-CT66CFmJ.js"; import { _ as ee } from "./PrimaryButton-C6t27UzX.js"; import { _ as te } from "./SecondaryButton-DopaOyGA.js"; import { r as ae } from "./PrinterIcon-CisfNOAW.js"; import { r as Z } from "./BanknotesIcon-D31jRm2d.js"; import { _ as se } from "./FloatButton-Ci1qFIeh.js"; import { _ as oe } from "./ExtraOptionsButton-CdyZ58LY.js"; import "./Modal-tn0Up1zP.js"; const re = { class: "pb-12 space-y-12 divide-y-2" }, ne = { class: "py-4" }, le = e("h2", { class: "text-base font-semibold leading-7 text-gray-900" }, "Informações Básicas", -1), de = e("p", { class: "mt-1 text-sm leading-6 text-gray-600" }, "Informações sobre o redistro de pagamento como devedor, dívida e valor total da dívida", -1), ie = { class: "mt-10 grid grid-cols-1 gap-x-6 gap-y-8 sm:grid-cols-6" }, ce = { class: "sm:col-span-6" }, ue = e("label", { for: "payment-debt", class: "block text-sm font-medium leading-6 text-gray-900 required-input-label" }, "Dívida", -1), me = { class: "mt-2" }, pe = ["disabled"], ye = { key: 0, class: "text-red-500 text-sm" }, _e = { class: "sm:col-span-3" }, xe = e("label", { for: "payment-debtor", class: "block text-sm font-medium leading-6 text-gray-900 required-input-label" }, "Devedor", -1), he = { class: "mt-2" }, ge = ["disabled"], be = { key: 0, class: "text-red-500 text-sm" }, ve = { class: "sm:col-span-3" }, fe = e("label", { for: "payment-total-amount", class: "block text-sm font-medium leading-6 text-gray-900 required-input-label" }, "Valor total", -1), we = { class: "mt-2" }, ke = ["disabled"], $e = { key: 0, class: "text-red-500 text-sm" }, Ce = { class: "sm:col-span-6" }, Ve = e("label", { for: "payment-observations", class: "block text-sm font-medium leading-6 text-gray-900" }, "Observações", -1), De = { class: "mt-2" }, Pe = ["disabled"], qe = { key: 0, class: "text-red-500 text-sm" }, Se = { key: 0, class: "py-4" }, Ue = { class: "sm:col-span-6" }, Re = ["title"], Ee = { class: "flex h-6 items-center" }, Te = ["disabled"], je = { class: "text-sm leading-6" }, ze = { key: 1, class: "py-4" }, Ae = { key: 0 }, Le = e("h2", { class: "text-base font-semibold leading-7 text-gray-900" }, "Pagamentos concluídos", -1), Me = e("p", { class: "mt-1 text-sm leading-6 text-gray-600" }, "Insira o adiantamento ou os pagamentos parciais já realizando desta dívida", -1), Ne = [Le, Me], Oe = { key: 1 }, Be = e("h2", { class: "text-base font-semibold leading-7 text-gray-900" }, "Lista de pagamentos concluídos", -1), Ie = e("p", { class: "mt-1 text-sm leading-6 text-gray-600" }, "Abaixo está listado os registros de pagamentos realizados. Para adicionar novos pagamentos, ou remover algum pagamento existente, entre na seção de pagamento.", -1), Fe = [Be, Ie], Ge = { key: 2 }, Xe = e("h2", { class: "text-base font-semibold leading-7 text-gray-900" }, "Realize um novo pagamento", -1), Ze = e("p", { class: "mt-1 text-sm leading-6 text-gray-600" }, "Adicione um pagamento ou remova um pagamento existente.", -1), He = [Xe, Ze], Je = { key: 3, class: "mt-10 grid grid-cols-1 gap-x-6 gap-y-4 sm:grid-cols-6" }, Ke = { class: "col-span-3" }, Qe = e("label", { for: "record-amount", class: "block text-sm font-medium leading-6 text-gray-900 required-input-label" }, "Valor (R$)", -1), We = { class: "mt-2" }, Ye = ["max", "disabled"], et = { class: "text-gray-400 text-xs py-1" }, tt = { key: 0, class: "text-red-500 text-sm" }, at = { class: "sm:col-span-3" }, st = e("label", { for: "record-date", class: "block text-sm font-medium leading-6 text-gray-900 required-input-label" }, "Data do pagamento", -1), ot = { class: "mt-2" }, rt = ["max", "disabled"], nt = e("p", { class: "text-gray-400 text-xs py-1" }, "Não aceita datas no futuro", -1), lt = { key: 0, class: "text-red-500 text-sm" }, dt = { key: 4, class: "w-full py-5 flex justify-end" }, it = ["disabled"], ct = { key: 5, class: "flex flex-col" }, ut = { class: "overflow-x-auto sm:-mx-6 lg:-mx-8" }, mt = { class: "inline-block min-w-full py-2 sm:px-6 lg:px-8" }, pt = { class: "overflow-hidden" }, yt = { class: "min-w-full text-left text-sm font-light" }, _t = { class: "border-b bg-white font-medium dark:border-neutral-500 dark:bg-neutral-600" }, xt = e("th", { scope: "col", class: "px-6 py-4 text-center" }, "Valor", -1), ht = e("th", { scope: "col", class: "px-6 py-4 text-center" }, "Data", -1), gt = { key: 0, scope: "col", class: "px-6 py-4 text-center" }, bt = { class: "border-b bg-white dark:border-neutral-500 dark:bg-neutral-700" }, vt = { class: "whitespace-nowrap px-6 text-center" }, ft = { key: 0, class: "w-full relative flex flex-wrap items-stretch" }, wt = e("span", { class: "w-1/4 select-none flex items-center whitespace-nowrap rounded-l border border-r-0 border-solid border-neutral-300 px-3 py-[0.25rem] text-center text-xs font-normal leading-[1.6] text-neutral-700 dark:border-neutral-600 dark:text-neutral-200 dark:placeholder:text-neutral-200", id: "basic-addon1" }, "R$", -1), kt = ["max", "onUpdate:modelValue"], $t = { key: 1 }, Ct = { class: "whitespace-nowrap px-6 py-4 text-center" }, Vt = { key: 0, class: "w-full relative flex flex-wrap items-stretch" }, Dt = ["max", "onUpdate:modelValue"], Pt = { key: 1 }, qt = { key: 0, class: "whitespace-nowrap px-6 py-4 select-none" }, St = { key: 1, class: "text-red-500 text-sm" }, Ut = { key: 2, class: "text-red-500 text-sm" }, Rt = { key: 0, class: "text-red-500 text-sm py-5 text-center" }, Et = { key: 1, class: "text-red-500 text-sm py-5 text-center" }, Tt = { key: 2, class: "text-red-500 text-sm py-5 text-center" }, jt = { key: 6, class: "py-5 text-gray-400 text-center" }, zt = { __name: "CreateUpdatePayModal", props: { modal: Object, payment: { type: Object, default: null } }, emits: ["close", "submit"], setup(t, { emit: R }) { const m = R, l = t, E = b(() => l.payment.records_list.data.length + 1), x = b(() => T && l.payment.total_value - l.payment.records_list.data.reduce((_, n) => _ + n.amount, 0)), g = b(() => { const _ = new Date; return l.payment.records_list.data.some(n => new Date(n.date) > _) }), C = b(() => l.payment.records_list.data.some(_ => _.amount <= 0)), V = b(() => l.payment.records_list.data.sort((_, n) => new Date(_.date) - new Date(n.date))), D = b(() => l.modal.mode === "pay"), T = b(() => l.modal.mode !== "create" || l.payment.records_list.enable_records), P = b(() => l.payment.debt.length && l.payment.debtor.length && l.payment.total_value > 0), d = M({ id: E, amount: 0, past: !1, register_date: U(), filepath: null }), j = N(!1), y = () => { if (l.payment.records_list.enable_records && l.payment.records_list.data.length) if (confirm("Tem certeza que deseja desmarcar? Todos os registros serão excluídos!")) l.payment.records_list.data.length = [], d.reset(); else return; l.payment.records_list.enable_records = !l.payment.records_list.enable_records }, p = () => { if (!d.amount || d.amount > x.value) { d.errors.amount = `O valor do registro deve ser maior que R$ 0,00 e menor que ${w(x.value)}`; return } if (d.errors.amount = "", !d.register_date || new Date(d.register_date) > new Date) { d.errors.date = `A data do registro deve ser menor ou igual a ${U()}`; return } d.errors.date = "", j.value || (d.filepath = null), l.payment.records_list.data.push({ ...d }), j.value = !1, d.reset() }, i = (_, n = null) => { if (l.modal.mode === "create") { l.payment.records_list.data = l.payment.records_list.data.filter(s => s.id !== _); return } else confirm("Você tem certeza que deseja excluir esse registro? (Essa ação não pode ser desfeita)") && n.delete(route("records.destroy", _), { preserveScroll: !0, onSuccess: () => { l.payment.records_list.data = l.payment.records_list.data.filter(s => s.id !== _) } }) }, k = () => { m("close") }, q = () => { m("submit") }; return (_, n) => (a(), z(W, { show: t.modal.show, onClose: k }, { icon: $(() => [e("div", { class: A(["mx-auto shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-blue-400 sm:mx-0 sm:h-10 sm:w-10", { "bg-yellow-400": t.modal.mode === "update", "bg-green-400": t.modal.mode === "pay" }]) }, [t.modal.mode === "create" ? (a(), z(r(ae), { key: 0, class: "w-5 h-5 text-white" })) : c("", !0), t.modal.mode === "update" ? (a(), z(r(G), { key: 1, class: "w-5 h-5 text-white" })) : c("", !0), t.modal.mode === "pay" ? (a(), z(r(Z), { key: 2, class: "w-5 h-5 text-white" })) : c("", !0)], 2)]), title: $(() => [L(u(t.modal.title), 1)]), content: $(() => [e("form", { onSubmit: J(q, ["prevent"]) }, [e("div", re, [e("section", ne, [le, de, e("div", ie, [e("div", ce, [ue, e("div", me, [v(e("input", { type: "text", name: "payment-debt", id: "payment-debt", autocomplete: "on", class: "simple-input disabled:bg-gray-200", autofocus: "true", placeholder: "Título da dívida", disabled: D.value || t.payment.type === 2, "onUpdate:modelValue": n[0] || (n[0] = s => t.payment.debt = s), required: "" }, null, 8, pe), [[f, t.payment.debt]]), t.payment.errors.debt ? (a(), o("p", ye, u(t.payment.errors.debt), 1)) : c("", !0)])]), e("div", _e, [xe, e("div", he, [v(e("input", { type: "text", name: "payment-debtor", id: "payment-debtor", autocomplete: "on", class: "simple-input disabled:bg-gray-200", placeholder: "Nome do devedor", disabled: D.value, "onUpdate:modelValue": n[1] || (n[1] = s => t.payment.debtor = s), required: "" }, null, 8, ge), [[f, t.payment.debtor]]), t.payment.errors.debtor ? (a(), o("p", be, u(t.payment.errors.debtor), 1)) : c("", !0)])]), e("div", ve, [fe, e("div", we, [v(e("input", { id: "payment-total-amount", name: "payment-total-amount", type: "number", step: "0.01", min: "0", autocomplete: "off", class: "simple-input disabled:bg-gray-200", placeholder: "Valor total inicial da dívida", disabled: D.value, "onUpdate:modelValue": n[2] || (n[2] = s => t.payment.total_value = s), required: "" }, null, 8, ke), [[f, t.payment.total_value]]), t.payment.errors.total_value ? (a(), o("p", $e, u(t.payment.errors.total_value), 1)) : c("", !0)])]), e("div", Ce, [Ve, e("div", De, [v(e("textarea", { type: "text", observations: "payment-observations", id: "payment-observations", autocomplete: "on", class: "simple-input disabled:bg-gray-200", placeholder: "Descreva a dívida mais detalhadamente ou insira informações adicionais", disabled: D.value, "onUpdate:modelValue": n[3] || (n[3] = s => t.payment.observations = s) }, null, 8, Pe), [[f, t.payment.observations]]), t.payment.errors.observations ? (a(), o("p", qe, u(t.payment.errors.observations), 1)) : c("", !0)])])])]), t.modal.mode === "create" ? (a(), o("section", Se, [e("div", Ue, [e("div", { class: "mt-2 relative flex gap-x-3", title: P.value ? "" : "Preencha ao menos a dívida, o devedor e o valor total." }, [e("div", Ee, [e("input", { id: "payment-enable-records", name: "payment-enable-records", type: "checkbox", onChange: n[4] || (n[4] = s => y()), disabled: !P.value, class: "h-4 w-4 rounded border-gray-300 text-green-600 focus:ring-green-600 disabled:border-gray-100 disabled:text-green-200 disabled:bg-gray-300" }, null, 40, Te)]), e("div", je, [e("label", { for: "payment-enable-records", class: A(["font-medium text-gray-900 select-none cursor-pointer", { "text-gray-300": !P.value, "cursor-not-allowed": !P.value }]) }, "Adicionar pagamentos concluídos", 2)])], 8, Re)])])) : c("", !0), T.value ? (a(), o("section", ze, [t.modal.mode === "create" ? (a(), o("div", Ae, Ne)) : c("", !0), t.modal.mode === "update" ? (a(), o("div", Oe, Fe)) : c("", !0), t.modal.mode === "pay" ? (a(), o("div", Ge, He)) : c("", !0), t.modal.mode !== "update" ? (a(), o("div", Je, [e("div", Ke, [Qe, e("div", We, [v(e("input", { id: "record-amount", name: "record-amount", type: "number", step: "0.01", min: "0", max: x.value, autocomplete: "off", class: "simple-input disabled:bg-gray-200 disabled:opacity-75", disabled: x.value == 0, placeholder: "Valor do pagamento parcial", "onUpdate:modelValue": n[5] || (n[5] = s => r(d).amount = s) }, null, 8, Ye), [[f, r(d).amount]]), e("p", et, "Valor Restante:y " + u(r(w)(x.value)), 1), r(d).errors.amount ? (a(), o("p", tt, u(r(d).errors.amount), 1)) : c("", !0)])]), e("div", at, [st, e("div", ot, [v(e("input", { id: "record-date", name: "record-date", type: "date", max: r(U)(), autocomplete: "off", class: "simple-input disabled:bg-gray-200", disabled: x.value == 0, placeholder: "Data de pagamento do valor parcial", "onUpdate:modelValue": n[6] || (n[6] = s => r(d).register_date = s) }, null, 8, rt), [[f, r(d).register_date]]), nt, r(d).errors.date ? (a(), o("p", lt, u(r(d).errors.date), 1)) : c("", !0)])])])) : c("", !0), t.modal.mode !== "update" ? (a(), o("div", dt, [e("button", { type: "button", class: "w-full px-4 py-2 bg-blue-600 border border-gray-300 rounded-md font-semibold text-xs text-white uppercase tracking-widest shadow-sm hover:bg-blue-700 focus:outline-none focus:border-blue-300 focus:ring focus:ring-blue-200 active:text-gray-800 active:bg-gray-50 disabled:opacity-25 transition", disabled: !r(d).amount || !r(d).register_date || r(d).amount > x.value, onClick: n[7] || (n[7] = s => p()) }, " Inserir registro ", 8, it)])) : c("", !0), t.payment.records_list.data.length ? (a(), o("div", ct, [e("div", ut, [e("div", mt, [e("div", pt, [e("table", yt, [e("thead", _t, [e("tr", null, [xt, ht, t.modal.mode !== "pay" ? (a(), o("th", gt, "Excluir")) : c("", !0)])]), e("tbody", null, [(a(!0), o(O, null, F(V.value, s => (a(), o("tr", bt, [e("td", vt, [t.modal.mode !== "update" && !s.past ? (a(), o("div", ft, [wt, v(e("input", { id: "record_item-amount-edit", name: "record_item-amount-edit", type: "number", step: "0.01", min: "0", max: x.value, autocomplete: "off", class: "relative m-0 block min-w-0 flex-auto rounded-r border border-solid border-neutral-300 bg-transparent bg-clip-padding px-3 py-[0.25rem] text-xs font-normal leading-[1.6] text-neutral-700 outline-none transition duration-200 ease-in-out focus:z-[3] focus:border-primary focus:text-neutral-700 focus:shadow-[inset_0_0_0_1px_rgb(59,113,202)] focus:outline-none dark:border-neutral-600 dark:text-neutral-200 dark:placeholder:text-neutral-200 dark:focus:border-primary disabled:bg-gray-200", placeholder: "Editar pagamento parcial", "onUpdate:modelValue": S => s.amount = S }, null, 8, kt), [[f, s.amount]])])) : (a(), o("p", $t, u(r(w)(s.amount)), 1))]), e("td", Ct, [t.modal.mode !== "update" && !s.past ? (a(), o("div", Vt, [v(e("input", { id: "record-date", name: "record-date", type: "date", max: r(U)(), autocomplete: "off", class: "w-3/4 relative m-0 block min-w-0 flex-auto rounded-r border border-solid border-neutral-300 bg-transparent bg-clip-padding px-3 py-[0.25rem] text-xs font-normal leading-[1.6] text-neutral-700 outline-none transition duration-200 ease-in-out focus:z-[3] focus:border-primary focus:text-neutral-700 focus:shadow-[inset_0_0_0_1px_rgb(59,113,202)] focus:outline-none dark:border-neutral-600 dark:text-neutral-200 dark:placeholder:text-neutral-200 dark:focus:border-primary disabled:bg-gray-200", placeholder: "Data de pagamento do valor parcial", "onUpdate:modelValue": S => s.register_date = S }, null, 8, Dt), [[f, s.register_date]])])) : (a(), o("p", Pt, u(r(U)(s.register_date, !0)), 1))]), t.modal.mode !== "pay" ? (a(), o("td", qt, [h(r(X), { class: "w-5 h-5 cursor-pointer m-auto text-gray-700 hover:text-red-500 active:text-red-700", onClick: S => i(s.id, s), title: "Remover este registro" }, null, 8, ["onClick"])])) : c("", !0), s.errors.amount ? (a(), o("p", St, u(s.errors.amount), 1)) : c("", !0), s.errors.date ? (a(), o("p", Ut, u(s.errors.date), 1)) : c("", !0)]))), 256))])]), x.value < 0 ? (a(), o("p", Rt, "A soma dos pagamentos não pode ser maior que " + u(r(w)(t.payment.total_value)), 1)) : c("", !0), g.value ? (a(), o("p", Et, "Todas as datas de registro devem ser não nulas e menores ou iguais a " + u(r(U)(new Date)), 1)) : c("", !0), C.value ? (a(), o("p", Tt, "Todos os valores devem ser maiores que R$ 0,00")) : c("", !0)])])])])) : (a(), o("div", jt, "Não há registro de pagamento no momento."))])) : c("", !0)])], 32)]), footer: $(() => [h(te, { class: A({ disabled: t.payment.processing }), onClick: n[8] || (n[8] = s => k()) }, { default: $(() => [L("Cancelar ")]), _: 1 }, 8, ["class"]), h(ee, { class: A({ disabled: t.payment.processing || x.value < 0 || g.value || C.value }), disabled: t.payment.processing || x.value < 0 || g.value || C.value, onClick: n[9] || (n[9] = s => q()) }, { default: $(() => [L(u(t.modal.primary_button_txt), 1)]), _: 1 }, 8, ["class", "disabled"])]), _: 1 }, 8, ["show"])) } }, At = { class: "font-semibold text-xl text-gray-800 leading-tight" }, Lt = { class: "pt-12 print:hidden" }, Mt = { class: "max-w-7xl mx-auto sm:px-6 lg:px-8" }, Nt = { class: "bg-white overflow-hidden shadow-xl sm:rounded-lg p-5" }, Ot = { class: "flex flex-row items-center space-x-3" }, Bt = { class: "py-12 print:py-6" }, It = { class: "max-w-7xl mx-auto print:max-w-full" }, Ft = { class: "px-0 print:px-0" }, Gt = { class: "bg-white overflow-hidden shadow-xl sm:rounded-lg print:shadow-none" }, Xt = { class: "flex flex-col" }, Zt = { class: "overflow-x-auto sm:-mx-6 lg:-mx-8" }, Ht = { class: "inline-block min-w-full py-2 sm:px-6 lg:px-8" }, Jt = { class: "overflow-hidden" }, Kt = { class: "min-w-full text-left text-sm font-light" }, Qt = e("thead", { class: "border-b font-medium dark:border-neutral-500" }, [e("tr", null, [e("th", { scope: "col", class: "px-6 py-4 text-center" }, "#"), e("th", { scope: "col", class: "px-6 py-4 text-center" }, "Dívida"), e("th", { scope: "col", class: "px-6 py-4 text-center" }, "Devedor"), e("th", { scope: "col", class: "px-6 py-4 text-center" }, "À pagar"), e("th", { scope: "col", class: "px-6 py-4 text-center" }, "Valor total"), e("th", { scope: "col", class: "px-6 py-4 text-center print:hidden" }, "Pagar "), e("th", { scope: "col", class: "px-6 py-4 text-center print:hidden" }, "Editar "), e("th", { scope: "col", class: "px-6 py-4 text-center print:hidden" }, "Excluir ")])], -1), Wt = { class: "border-b transition duration-300 ease-in-out hover:bg-neutral-100 print:break-inside-avoid" }, Yt = { class: "whitespace-nowrap py-4 text-center font-medium" }, ea = { class: "whitespace-normal px-6 py-4 text-center trim" }, ta = ["title"], aa = { class: "whitespace-normal px-6 py-4 text-center" }, sa = { class: "whitespace-nowrap px-2 py-4 text-center" }, oa = { class: "whitespace-nowrap px-2 py-4 text-center" }, ra = ["title", "onClick"], na = ["title", "onClick"], la = ["title", "onClick"], da = { key: 1, class: "whitespace-nowrap px-4 py-4 text-center select-none print:hidden" }, ia = { key: 1, class: "transition duration-300 ease-in-out hover:bg-neutral-100 print:break-inside-avoid" }, ca = e("td", { class: "whitespace-nowrap px-6 py-4 text-center", colspan: "9" }, "Não há pagamentos cadastrados no momento!", -1), ua = [ca], wa = { __name: "Payment", props: { page: Object, page_options: { type: Array, default: null }, payments_list: Object }, setup(t) { const R = t, m = M({ id: null, debt: "", debtor: "", total_value: 0, partial_value: 0, observations: "", records_list: { enable_records: !1, data: [] } }), l = N(""), E = b(() => { const y = l.value.toLowerCase(); return R.payments_list.filter(p => p.motive.toLowerCase().includes(y) || p.entity_name.toLowerCase().includes(y) || w(p.accounting.total_value).toString().toLowerCase().includes(y) || w(p.accounting.partial_value).toString().toLowerCase().includes(y)) }), x = b(() => R.payments_list.reduce((y, p) => y + p.accounting.partial_value, 0)), g = N({ mode: "create", show: !1, get title() { switch (this.mode) { case "create": return "Criar pagamento"; case "update": return "Editar pagamento"; case "pay": return "Pagar pagamento" } }, get primary_button_txt() { switch (this.mode) { case "create": return "Cadastrar"; case "update": return "Atualizar"; case "pay": return "Pagar" } } }), C = (y, p = null) => { const i = ["update", "pay"].includes(y); if (p !== null && i) { const k = R.payments_list.find(q => q.id === p); if (k) { const { id: q, type: _, motive: n, entity_name: s, observations: S, records: B, accounting: I } = k; m.id = q, m.type = _, m.debt = n, m.debtor = s, m.total_value = I.total_value, m.partial_value = I.partial_value, m.observations = S, m.records_list.enable_records = !!B.length, m.records_list.data = B.map(H => M(H)) } } g.value.mode = y, g.value.show = !0 }, V = () => { m.reset(), g.value.show = !1 }, D = () => { m.post(route("payments.store"), { preserveScroll: !0, onSuccess: () => V(), onError: y => { console.log(y) } }) }, T = () => { m.put(route("payments.update", m.id), { preserveScroll: !0, onSuccess: () => V() }) }, P = () => { m.put(route("payments.pay", m.id), { preserveScroll: !0, onSuccess: () => V() }) }, d = (y, p) => { confirm(`Você tem certeza que deseja excluir o pagamento "${p}"? Esta ação não poderá ser desfeita!`) && m.delete(route("payments.destroy", y), { preserveScroll: !0, onSuccess: () => alert("Pagamento deletado com sucesso!") }) }, j = () => { switch (g.value.mode) { case "create": return D(); case "update": return T(); case "pay": return P(); default: alert("Método desconhecido. Informar o Técnico.") } }; return (y, p) => (a(), o(O, null, [h(r(K), { title: t.page.name }, null, 8, ["title"]), h(Q, { page: t.page, page_options: t.page_options }, { header: $(() => [e("h2", At, u(t.page.name) + " | " + u(r(w)(x.value)), 1), h(se, { icon: "plus", onClick: p[0] || (p[0] = i => C("create")), title: "Cadastrar Payment", class: "print:hidden" })]), default: $(() => [e("div", Lt, [e("div", Mt, [e("div", Nt, [e("div", Ot, [h(r(Y), { class: "w-5 y-5" }), v(e("input", { type: "text", name: "search_term", id: "search_term", autocomplete: "on", class: "simple-input", autofocus: "true", placeholder: "Pesquisar termo...", "onUpdate:modelValue": p[1] || (p[1] = i => l.value = i) }, null, 512), [[f, l.value]])])])])]), e("div", Bt, [e("div", It, [e("div", Ft, [e("div", Gt, [e("div", Xt, [e("div", Zt, [e("div", Ht, [e("div", Jt, [e("table", Kt, [Qt, e("tbody", null, [E.value.length ? (a(!0), o(O, { key: 0 }, F(E.value, i => (a(), o("tr", Wt, [e("td", Yt, u(i.id), 1), e("td", ea, [L(u(i.motive) + " ", 1), i.observations ? (a(), o("span", { key: 0, title: i.observations, class: "inline-flex items-center rounded-md bg-gray-50 px-2 py-1 text-xs font-medium text-gray-600 ring-1 ring-inset ring-gray-500/10 cursor-help" }, "OBS", 8, ta)) : c("", !0)]), e("td", aa, u(i.entity_name), 1), e("td", sa, u(r(w)(i.accounting.partial_value)), 1), e("td", oa, u(r(w)(i.accounting.total_value)), 1), e("td", { class: "whitespace-nowrap px-4 py-4 text-center cursor-pointer hover:text-green-700 active:text-green-900 select-none print:hidden", title: "PAGAR: " + i.motive + "(" + i.entity_name + ")", onClick: k => C("pay", i.id) }, [h(r(Z), { class: "w-5 h-5 m-auto" })], 8, ra), e("td", { class: "whitespace-nowrap px-4 py-4 text-center cursor-pointer hover:text-yellow-700 active:text-yellow-900 select-none print:hidden", title: "EDITAR: " + i.motive + "(" + i.entity_name + ")", onClick: k => C("update", i.id) }, [h(r(G), { class: "w-5 h-5 m-auto" })], 8, na), i.type !== 2 ? (a(), o("td", { key: 0, class: "whitespace-nowrap px-4 py-4 text-center cursor-pointer hover:text-red-700 active:text-red-900 select-none print:hidden", title: "EXCLUIR: " + i.motive + "(" + i.entity_name + ")", onClick: k => d(i.id, i.name) }, [h(r(X), { class: "w-5 h-5 m-auto" })], 8, la)) : (a(), o("td", da, " Venda "))]))), 256)) : (a(), o("tr", ia, ua))])])])])])])])])])]), h(zt, { show: g.value.show, modal: g.value, payment: r(m), onSubmit: j, onClose: V }, null, 8, ["show", "modal", "payment"]), h(oe, { mode: ["rollup", "print_page", "link"], link_type: ["previous"], link: [y.route("payments.previous")] }, null, 8, ["link"])]), _: 1 }, 8, ["page", "page_options"])], 64)) } }; export { wa as default };
